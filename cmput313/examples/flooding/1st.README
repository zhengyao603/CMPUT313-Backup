
This directory contains cnet implementations of 3 Network Layer flooding
algorithms of increasing complexity and efficiency.  Read the block
comment at the top of each source protocol file for an explanation of
that file's implementation.

Each implementation attempts to quash unecessary packets by limiting the
number of hops they may travel.  The constant MAXHOPS is set to 4 and
is appropriate for the simple topology in AUSTRALIA.MAP.  The constant
MAXHOPS may need to be set to larger values for topologies with a greater
diameter, else nodes at the periphery will never be able to communicate
because they are too far away and their packets will be silently discarded!

Each implementation focuses on just its routing decisions by employing
a lot of common code - they each use the same basic DLL implementation, and
a common NL routing table.  In cnet, this is accomplished by developing
the protocols in multiple C source files, and specifying these in each
topology file:

    FLOODING1:   compile = "flooding1.c dll_basic.c nl_table.c"
    FLOODING2:   compile = "flooding2.c dll_basic.c nl_table.c"
    FLOODING3:   compile = "flooding3.c dll_basic.c nl_table.c"

Each flooding?.c file #includes the header files dll_basic.h and nl_table.h
to receive declarations of the available functions.

The file nl_table.c provides an implementation of a simple Network Layer
table - an array of structures that is simply extended each time a
new remote address is found (observed).  Its basic implementation is:

    typedef struct {
        CnetAddr    address;
        int         ackexpected;
        int         nextpackettosend;
        int         packetexpected;
        ........
    } NLTABLE;

with additional fields used for later protocols.  Its fields maintain
information about each remote node's address and the end-to-end
sequence numbers used in a stop-and-wait protocol (at the NL level)
between ourselves and the remote node.  For flooding3, additional
fields remember the best link on which to address packets for a
remote node, and how many hops away we believe it to be.

A simple encoding "trick" is used in flooding2 and flooding3 in
which we use an integer variable to hold a large Boolean bitmap.
If we don't know the best link, the constant ALL_LINKS (value = -1)
is used, as its binary representation of "all one bits" indicates
that all possible links should be used (full flooding).  Over time,
a single best link will become known, and that will be stored in
an integer variable with the value (1 << BEST_LINK).  For example,
if the best link to use is link number 3, the value 8 (i.e. 1<<3)
will be stored.  When we wish to flood a packet via all necessary
links, functions flood2() or flood3() employ a bitmap indicating
which links should be used.

As we are assuming 32-bit integers, so only nodes with at most 32
links can use this encoding trick.

--------------------------
Chris.McDonalds@uwa.edu.au
